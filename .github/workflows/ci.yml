name: Hybrid Deployment (AWS + LocalStack + Ngrok)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configuración de Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 3. Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Iniciar LocalStack
      - name: Start LocalStack
        run: |
          docker run -d --name localstack_main -p 4566:4566 -p 4510-4559:4510-4559 -v /var/run/docker.sock:/var/run/docker.sock localstack/localstack

      # 5. Obtener la IP del contenedor de LocalStack
      - name: Obtener la IP del contenedor de LocalStack
        id: get-localstack-ip
        run: |
          LOCALSTACK_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' localstack_main)
          echo "LOCALSTACK_URL=http://${LOCALSTACK_IP}:4566" >> $GITHUB_ENV
          echo "IP de LocalStack: $LOCALSTACK_URL"

      # 6. Debug LOCALSTACK_URL
      - name: Debug LOCALSTACK_URL
        run: |
          echo "URL de LocalStack: $LOCALSTACK_URL"

      # 7. Esperar a que LocalStack esté listo
      - name: Wait for LocalStack
        run: |
          until curl -s $LOCALSTACK_URL/_localstack/init | grep -q '"READY": true'; do
            echo "Waiting for LocalStack to be ready..."
            sleep 2
          done

      # 8. Instalar Ngrok y sus dependencias
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq

      - name: Download and Install Ngrok
        run: |
          mkdir -p $HOME/ngrok
          curl -L https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz -o $HOME/ngrok/ngrok.tgz
          tar -xvzf $HOME/ngrok/ngrok.tgz -C $HOME/ngrok
          chmod +x $HOME/ngrok/ngrok
          echo "$HOME/ngrok" >> $GITHUB_PATH
          $HOME/ngrok/ngrok version

      # 9. Autenticar Ngrok con el authtoken
      - name: Authenticate Ngrok
        run: |
          $HOME/ngrok/ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      # 10. Lanzar Ngrok en segundo plano
      - name: Start Ngrok
        run: |
          nohup $HOME/ngrok/ngrok http 5000 &

      # 11. Obtener la URL pública de Ngrok
      - name: Get Ngrok URL
        id: get-ngrok-url
        run: |
          sleep 10
          NGROK_URL=$(curl --silent http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "NGROK_URL=${NGROK_URL}" >> $GITHUB_ENV
          echo "Public Ngrok URL: $NGROK_URL"

      # 12. Desplegar en AWS + LocalStack
      - name: Deploy to AWS + LocalStack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: us-east-1
          LOCALSTACK_URL: ${{ env.LOCALSTACK_URL }}
          NGROK_URL: ${{ env.NGROK_URL }}
        run: |
          python src/deployment.py | tee deployment_output.txt

      # 13. Capturar la URL de la API Gateway
      - name: Get API Gateway URL from output
        id: get-api-url
        run: |
          API_URL=$(grep -oP 'https://[a-z0-9]+\.execute-api\.[^/]+/[^"]+' deployment_output.txt)
          if [ -z "$API_URL" ]; then
            echo "Error: No se pudo encontrar la URL de la API Gateway en la salida."
            exit 1
          fi
          echo "API_URL=${API_URL}" >> $GITHUB_ENV
          echo "API Gateway URL: $API_URL"

      # 14. Realizar solicitud GET /camino_mas_largo
      - name: Perform API Request
        run: |
          echo "Performing GET request to API Gateway URL: $API_URL/camino_mas_largo?start=the&end=and"
          curl -X GET "$API_URL/camino_mas_largo?start=the&end=and" -o response.json
          echo "Response:"
          cat response.json
