name: GraphWord Hybrid Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  hybrid-deployment:
    runs-on: ubuntu-22.04
    steps:
      # 1. Clonar el código del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 3. Instalar dependencias necesarias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      # 4. Iniciar LocalStack
      - name: Start LocalStack
        run: |
          docker run -d --name localstack -p 4566:4566 -p 4510-4559:4510-4559 -v /var/run/docker.sock:/var/run/docker.sock localstack/localstack

      # 5. Esperar a que LocalStack esté listo
      - name: Wait for LocalStack to be ready
        run: |
          for i in {1..90}; do
            RESPONSE=$(curl -s http://localhost:4566/health || echo "error")
            if [[ "$RESPONSE" == *"running"* ]]; then
              echo "LocalStack is ready."
              break
            fi
            echo "Waiting for LocalStack to be ready..."
            sleep 5
          done

      # 6. Verificar los logs de LocalStack
      - name: Check LocalStack Logs
        run: docker logs localstack

      # 7. Verificar conectividad con AWS real
      - name: Verify AWS connectivity
        run: |
          aws ec2 describe-vpcs
          aws s3 ls
        env:
          AWS_ACCESS_KEY_ID: ASIAUZTGPSLANRECIUZM
          AWS_SECRET_ACCESS_KEY: jpQCsZAqCe7/GRbHatPHoall4SVnEyEkBo642zl0
          AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEBQaCXVzLXdlc3QtMiJIMEYCIQDmS2eEO9fN+z/S2kfiOSu0VZU+nFwaZ9YYnpPpR7zgbQIhALzxs+pY+JA5b8/U1Wz+0iYzBAakjiLY5/963/E25euHKrACCN3//////////wEQABoMMzI5ODUzNjcwMDgwIgwiO80u2jQuF2SV+2oqhAKPb9Nxtsgjqs0zl7F0fn/PKXNUZLVDf5LL3VA39CaXqpbrR2pljsXfsjrV9Bs8naV7F1wEHJYN+dfERkpxX8qF0KppMASXeuIZKhzOp4N1Bk06wsjk6Z9cS7MjCcze4BIrn6rBqh7R4eHnbf0FLknRDMuDsLK328euyVdyVQChCoDAeAGVuLV4vTSIO6LU5/oyv5/Hel5wJkQ1rFVN3jZPDWnj/G8V3pIv3WZW0iD9EAdLbwi68MZHwTYfvpLdOfW16s+jJPwiTA3r4QcARvu7qugavvU4W5q6Mo+6XHPeQ9KndR8+inz8+OQ6Rr3Hw1tjJOfYEbKLqFSn/8iI6AntU4iizzDJ86a7BjqcAdfr7TE2s/qEBOB9aa6AHDQ+9NOCie27fUslRXoCeDyEpHcYvu+HX/AP0AYe8vlyR2sgi6NE35wjUda6XfN4cIxfWTT8Kt9Tt9tW5Ro+UR+Ifz6qh0cS8kNS3Aj8ah9IcE3fECr70R/lzfmF2f+O8uQlfvv1kE8ZOAUANdc5k3tfIU7P1QnQoIkuQx6xka/80eF7QGjjXLCgrLie3g==
